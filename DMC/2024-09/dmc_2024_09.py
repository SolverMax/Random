# Solution for problem at https://dmcommunity.org/challenge-sep-2024
# Code generated by Copilot, with corrections by SolverMax

from pyomo.environ import *

# Create a model
model = ConcreteModel()

# Define the data set
boats = {
    'Speedhawk': {'manufacturer': 'Sleekboat', 'cost': 6000, 'seating': 3, 'profit': 70},
    'Silverbird': {'manufacturer': 'Sleekboat', 'cost': 7000, 'seating': 5, 'profit': 80},
    'Catman': {'manufacturer': 'Racer', 'cost': 5000, 'seating': 2, 'profit': 50},
    'Classy': {'manufacturer': 'Racer', 'cost': 9000, 'seating': 6, 'profit': 110}
}

# Define decision variable
model.num_boats = Var(boats.keys(), within=NonNegativeIntegers)

# Objective function: Maximize total daily profit
model.profit = Objective(expr=sum(boats[b]['profit'] * model.num_boats[b] for b in boats), sense=maximize)

# Constraints
model.cost_constraint = Constraint(expr=sum(boats[b]['cost'] * model.num_boats[b] for b in boats) <= 420000)
model.boat_constraint = Constraint(expr=sum(model.num_boats[b] for b in boats) >= 50)
model.goodwill_constraint = Constraint(expr=sum(model.num_boats[b] for b in boats if boats[b]['manufacturer'] == 'Sleekboat') == 
                                            sum(model.num_boats[b] for b in boats if boats[b]['manufacturer'] == 'Racer'))
model.capacity_constraint = Constraint(expr=sum(boats[b]['seating'] * model.num_boats[b] for b in boats) >= 200)

# Solve the model
solver = SolverFactory('glpk')
solver.solve(model)

# Display the results
for b in boats:
    print(f"Number of {b} boats: {value(model.num_boats[b])}")
print(f"Total daily profit: {model.profit()}")